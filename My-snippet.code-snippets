{
  "ExpressJs 4 Router Variable": {
    "prefix": "express.Router",
    "body": "const router = express.Router();",
    "description": "Add router variable"
  },
  "Router All": {
    "prefix": "router.all",
    "body": [
      "router.all('${1:path}', (req, res, next) => {",
      "\t$2",
      "\tnext();",
      "});$0"
    ],
    "description": "This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs)."
  },
  "Router GET": {
    "prefix": "router.get",
    "body": ["router.get('${1:path}', (req, res) => {", "\t$2", "});$0"],
    "description": "Routes HTTP GET requests to the specified path with the specified callback functions."
  },
  "Router POST": {
    "prefix": "router.post",
    "body": ["router.post('${1:path}', (req, res) => {", "\t$2", "});$0"],
    "description": "Routes HTTP POST requests to the specified path with the specified callback functions."
  },
  "Router PUT": {
    "prefix": "router.put",
    "body": ["router.put('${1:path}', (req, res) => {", "\t$2", "});$0"],
    "description": "Routes HTTP PUT requests to the specified path with the specified callback functions."
  },
  "Router DELETE": {
    "prefix": "router.delete",
    "body": ["router.delete('${1:path}', (req, res) => {", "\t$2", "});"],
    "description": "Routes HTTP DELETE requests to the specified path with the specified callback functions."
  },

  /* ----- NODE JS STARTS HERE----- */
  "REQUIRE MODULE": {
    "prefix": "req",
    "body": ["const $1 = require(\"${1:module}\");"],
    "description": "Require a Module"
  },
  /* ----- NODE JS ENDS HERE----- */

  /* ----- MONGOOSE STARTS HERE----- */
  "MONGOOSE SCHEMA": {
    "prefix": "mongoose.Schema",
    "body": ["const Schema = mongoose.Schema;"],
    "description": "Mongoose Schema"
  },
  /* ----- MONGOOSE JS ENDS HERE----- */

  /* ----- METHOD STANDARD COMMENT BLOCK STARTS HERE----- */
  "METHOD COMMENT": {
    "prefix": "method comment",
    "body": ["const Schema = mongoose.Schema;"],
    "description": "Mongoose Schema"
  },
  /* ----- METHOD STANDARD COMMENT BLOCK ENDS HERE----- */

  /* ----- API STANDARD COMMENT BLOCK STARTS HERE----- */
  "API COMMENT": {
    "prefix": "api comment",
    "body": [
      "/* \n @Route:     GET api/user/current \n @Desc:      Get current user \n @Access:    Public \n */"
    ],
    "description": "Mongoose Schema"
  },
  /* ----- API STANDARD COMMENT BLOCK ENDS HERE----- */

  /* ----- REACT SNIPPETS STARTS HERE----- */
  "Link": {
    "prefix": "Link Router",
    "body": ["import { Link } from \"react-router-dom\";"],
    "description": "Link from React Router"
  },
  "IMPORT MODULE": {
    "prefix": "impo",
    "body": ["import $1 from \"${1:module}\";"],
    "description": "Importing a Module"
  },
  "IMPORT CSS": {
    "prefix": "impcss",
    "body": ["import classes from \"./${1:${TM_FILENAME_BASE}}.css\";"],
    "description": "Importing a CSS File"
  },
  "IMPORT REACT_MODULE": {
    "prefix": "React",
    "body": ["import React from \"react\";"],
    "description": "Importing React Module"
  },
  "EXPORT_DEFAULT": {
    "prefix": "exd",
    "body": ["export default ${1:${TM_FILENAME_BASE}};"],
    "description": "Export deafault"
  },
  "FUNCTIONAL_COMPONENT": {
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props) => (",
      "<div><div>${0}</div></div>",
      ");",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "Export deafault"
  },
  "FULL_FUNCTIONAL_COMPONENT": {
    "prefix": "rfcfull",
    "body": [
      "import React from 'react'",
      "import Aux from '../hoc/Aux'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "return (",
      "<Aux><div>${0}</div></Aux>",
      ");",
      "};",
      "export default ${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "Export deafault"
  },
  "importReactDom": {
    "prefix": "imrd",
    "body": "import { ${1:React} } from 'react-router-dom'"
  }
  // Regular expression for camelCase [a-z:/a+][A-Z:/a(1)][a-z]*$
  /* ----- REACT SNIPPETS ENDS HERE----- */
}
